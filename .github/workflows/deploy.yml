name: Deploy to YC VM (rsync + remote tasks)

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      REMOTE_DIR: ~/MoreVkus
      # Опционально: домен для проверки здоровья (оставь пустым для проверки по IP)
      DOMAIN: ${{ secrets.DOMAIN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          # add host key to known_hosts to avoid prompt (optional but safer)
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          printf "Host remote-server\n    HostName %s\n    User %s\n    IdentityFile ~/.ssh/id_ed25519\n    StrictHostKeyChecking no\n" "${{ secrets.SSH_HOST }}" "${{ secrets.SSH_USER }}" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Ensure remote dir exists
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "mkdir -p $REMOTE_DIR"

      - name: Rsync to server (protect .env and venv)
        run: |
          rsync -az --delete \
            --filter='protect .env' \
            --filter='protect .env.*' \
            --filter='protect venv/' \
            --filter='protect .venv/' \
            --filter='protect env/' \
            --exclude='__pycache__/' \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='*.pyc' \
            -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
            ./ "${{ secrets.SSH_USER }}"@"${{ secrets.SSH_HOST }}":$REMOTE_DIR

      - name: Remote deploy tasks (migrate, collectstatic, restart)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} bash -s <<'REMOTE_EOF'
            set -euo pipefail
            cd $HOME/MoreVkus
            if [ -f ./venv/bin/activate ]; then
              . ./venv/bin/activate
            fi
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            python manage.py migrate --noinput
            python manage.py collectstatic --noinput
            sudo systemctl restart django
            sudo systemctl reload nginx
            sleep 2
            if [ -n "${DOMAIN:-}" ]; then
              curl -I -m 10 -fsS "https://${DOMAIN}" || (echo "Health check failed" && exit 1)
            else
              curl -I -m 10 -fsS http://127.0.0.1/ || echo "Local check failed (but deploy continued)"
            fi
            echo "DEPLOY OK"
          REMOTE_EOF

      - name: Done
        run: echo "Deploy job finished"

